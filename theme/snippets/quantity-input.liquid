{% comment %}
  Renders quantity input with proper accessibility and validation

  Accepts:
  - product: {Object} Product Liquid object (required)
  - section_id: {String} Section ID (required)
  - product_form_id: {String} Form ID for the product form (required)

  Usage:
  {% render 'quantity-input', product: product, section_id: section.id, product_form_id: 'product-form-123' %}
{% endcomment %}

{%- liquid
  assign current_variant = product.selected_or_first_available_variant
  assign cart_qty = cart | item_count_for_variant: current_variant.id
  assign min_qty = current_variant.quantity_rule.min | default: 1
  assign max_qty = current_variant.quantity_rule.max
  assign step_qty = current_variant.quantity_rule.increment | default: 1
-%}

<div class="quantity-input-wrapper">
  <label class="form__label text-white font-medium mb-3 block" for="Quantity-{{ section_id }}">
    {{ 'products.product.quantity.label' | t }}
    {%- if cart_qty > 0 -%}
      <span class="quantity__rules-cart text-gray-400 text-sm ml-2" data-cart-quantity="{{ cart_qty }}">
        ({{ cart_qty }} in cart)
      </span>
    {%- endif -%}
  </label>

  <quantity-input class="quantity flex items-center bg-gray-800 border border-gray-600 rounded-lg overflow-hidden w-fit">
    <button
      class="quantity__button quantity__button--minus w-12 h-12 flex items-center justify-center text-white hover:bg-gray-700 transition-colors duration-200 focus:outline-none focus:bg-gray-700"
      name="minus"
      type="button"
      aria-label="{{ 'products.product.quantity.decrease' | t: product: product.title | escape }}"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
      </svg>
    </button>

    <input
      class="quantity__input w-16 h-12 text-center bg-transparent text-white border-0 focus:outline-none focus:ring-0"
      type="number"
      name="quantity"
      id="Quantity-{{ section_id }}"
      data-cart-quantity="{{ cart_qty }}"
      data-min="{{ min_qty }}"
      min="{{ min_qty }}"
      {% if max_qty %}
        data-max="{{ max_qty }}"
        max="{{ max_qty }}"
      {% endif %}
      step="{{ step_qty }}"
      value="{{ min_qty }}"
      form="{{ product_form_id }}"
      inputmode="numeric"
    >

    <button
      class="quantity__button quantity__button--plus w-12 h-12 flex items-center justify-center text-white hover:bg-gray-700 transition-colors duration-200 focus:outline-none focus:bg-gray-700"
      name="plus"
      type="button"
      aria-label="{{ 'products.product.quantity.increase' | t: product: product.title | escape }}"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
      </svg>
    </button>
  </quantity-input>

  {%- if current_variant.quantity_rule.increment > 1 or current_variant.quantity_rule.min > 1 or max_qty -%}
    <div class="quantity__rules text-sm text-gray-400 mt-2">
      {%- if current_variant.quantity_rule.increment > 1 -%}
        <span class="quantity-rule">
          {{ 'products.product.quantity.multiples_of' | t: quantity: current_variant.quantity_rule.increment }}
        </span>
      {%- endif -%}
      {%- if current_variant.quantity_rule.min > 1 -%}
        <span class="quantity-rule">
          {{ 'products.product.quantity.minimum_of' | t: quantity: current_variant.quantity_rule.min }}
        </span>
      {%- endif -%}
      {%- if max_qty -%}
        <span class="quantity-rule">
          {{ 'products.product.quantity.maximum_of' | t: quantity: max_qty }}
        </span>
      {%- endif -%}
    </div>
  {%- endif -%}
</div>

<script>
  if (!customElements.get('quantity-input')) {
    customElements.define(
      'quantity-input',
      class QuantityInput extends HTMLElement {
        constructor() {
          super();
          this.input = this.querySelector('input');
          this.changeEvent = new Event('change', { bubbles: true });
          this.input.addEventListener('change', this.onInputChange.bind(this));
          this.querySelectorAll('button').forEach((button) =>
            button.addEventListener('click', this.onButtonClick.bind(this))
          );
        }

        quantityUpdateUnsubscriber = undefined;

        connectedCallback() {
          this.validateQtyRules();
          this.quantityUpdateUnsubscriber = subscribe(PUB_SUB_EVENTS.quantityUpdate, this.validateQtyRules.bind(this));
        }

        disconnectedCallback() {
          if (this.quantityUpdateUnsubscriber) {
            this.quantityUpdateUnsubscriber();
          }
        }

        onInputChange(event) {
          this.validateQtyRules();
        }

        onButtonClick(event) {
          event.preventDefault();
          const previousValue = this.input.value;

          if (event.target.name === 'plus') {
            this.input.stepUp();
          } else {
            this.input.stepDown();
          }

          if (previousValue !== this.input.value) this.input.dispatchEvent(this.changeEvent);
        }

        validateQtyRules() {
          const value = parseInt(this.input.value);
          if (this.input.min) {
            const min = parseInt(this.input.min);
            const buttonMinus = this.querySelector(".quantity__button[name='minus']");
            buttonMinus.classList.toggle('disabled', value <= min);
          }
          if (this.input.max) {
            const max = parseInt(this.input.max);
            const buttonPlus = this.querySelector(".quantity__button[name='plus']");
            buttonPlus.classList.toggle('disabled', value >= max);
          }
        }
      }
    );
  }
</script>
