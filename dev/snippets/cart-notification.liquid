{% comment %}
  Cart notification snippet
  Displays notifications when items are added to cart
{% endcomment %}

<div
  id="cart-notification"
  class="cart-notification cart-notification--hidden animate-in slide-in-from-right duration-300"
  aria-hidden="true"
>
  <div class="cart-notification__header">
    <h3 class="cart-notification__heading">Item added to cart</h3>
    <button type="button" class="cart-notification__close" aria-label="Close cart notification">
      {% render 'icon', icon: 'close', size: 'small' %}
    </button>
  </div>

  <div class="cart-notification__content">
    <div class="cart-notification__item">
      <img src="{{ 'image-no-image.png' | asset_url }}" alt="" class="cart-notification__image" width="60" height="60">
      <div class="cart-notification__details">
        <h3 class="cart-notification__title"></h3>
        <p class="cart-notification__price"></p>
        <p class="cart-notification__quantity"></p>
      </div>
    </div>
  </div>

  <div class="cart-notification__footer">
    <a href="{{ routes.cart_url }}" class="btn btn--primary">View Cart</a>
    <button type="button" class="btn btn--secondary cart-notification__close">Continue Shopping</button>
  </div>
</div>

<script>
  // Initialize cart notification after critical initialization
  document.addEventListener('theme:page:loaded', function () {
    const cartNotification = document.getElementById('cart-notification');
    if (!cartNotification) return;

    const closeButtons = document.querySelectorAll('.cart-notification__close');

    // Close notification function
    function hideNotification() {
      cartNotification.classList.remove('cart-notification--visible');
      cartNotification.classList.add('cart-notification--hidden');
      cartNotification.setAttribute('aria-hidden', 'true');
    }

    // Show notification function
    function showNotification() {
      cartNotification.classList.remove('cart-notification--hidden');
      cartNotification.classList.add('cart-notification--visible');
      cartNotification.setAttribute('aria-hidden', 'false');
    }

    // Close notification event listeners
    closeButtons.forEach((button) => {
      button.addEventListener('click', hideNotification);
    });

    // Auto-hide after 5 seconds when shown
    let autoHideTimeout;
    function scheduleAutoHide() {
      clearTimeout(autoHideTimeout);
      autoHideTimeout = setTimeout(hideNotification, 5000);
    }

    // Expose functions globally for cart functionality
    window.cartNotification = {
      show: function (data) {
        if (data) {
          // Update notification content if data is provided
          const image = cartNotification.querySelector('.cart-notification__image');
          const title = cartNotification.querySelector('.cart-notification__title');
          const price = cartNotification.querySelector('.cart-notification__price');
          const quantity = cartNotification.querySelector('.cart-notification__quantity');

          if (image && data.image) image.src = data.image;
          if (title && data.title) title.textContent = data.title;
          if (price && data.price) price.textContent = data.price;
          if (quantity && data.quantity) quantity.textContent = `Quantity: ${data.quantity}`;
        }

        showNotification();
        scheduleAutoHide();
      },
      hide: hideNotification,
    };

    // Ensure notification is hidden by default
    hideNotification();
  });

  // Fallback initialization if theme:page:loaded doesn't fire
  document.addEventListener('DOMContentLoaded', function () {
    setTimeout(() => {
      if (!window.cartNotification) {
        document.dispatchEvent(new CustomEvent('theme:page:loaded'));
      }
    }, 1000);
  });
</script>
