{% comment %}
  Renders product buy buttons with proper form handling and accessibility

  Accepts:
  - block: {Object} Block settings (required)
  - product: {Object} Product Liquid object (required)
  - product_form_id: {String} Form ID for the product form (required)
  - section_id: {String} Section ID (required)

  Usage:
  {% render 'product-buy-buttons', block: block, product: product, product_form_id: 'product-form-123', section_id: section.id %}
{% endcomment %}

{%- liquid
  assign current_variant = product.selected_or_first_available_variant
  assign show_dynamic_checkout = block.settings.show_dynamic_checkout | default: true
-%}

<div class="product-form__buttons space-y-4">
  <product-form class="product-form" data-hide-errors="{{ product.selected_or_first_available_variant.available }}">
    <div class="product-form__error-message-wrapper" role="alert" hidden>
      {% render 'icon', icon: 'error', size: 'small', color: 'red' %}
      <span class="product-form__error-message"></span>
    </div>

    {%- form 'product',
      product,
      id: product_form_id,
      class: 'form',
      novalidate: 'novalidate',
      data-type: 'add-to-cart-form'
    -%}
      <input type="hidden" name="id" value="{{ current_variant.id }}" class="product-variant-id">

      <div class="product-form__buttons space-y-3">
        <button
          type="submit"
          name="add"
          class="btn btn--primary btn--lg relative"
          {% if current_variant.available == false %}
            disabled
          {% endif %}
        >
          <!-- Button Content -->
          <div class="flex items-center justify-center gap-3">
            <!-- Cart Icon -->
            {% render 'icon', icon: 'cart', size: 'medium', color: 'black' %}

            <!-- Button Text -->
            <span>
              {%- if current_variant.available -%}
                {{ 'products.product.add_to_cart' | t }}
              {%- else -%}
                {{ 'products.product.sold_out' | t }}
              {%- endif -%}
            </span>
          </div>

          <!-- Loading Spinner -->
          <div class="loading-overlay__spinner absolute inset-0 flex items-center justify-center opacity-0 pointer-events-none">
            <div class="w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
          </div>
        </button>

        {%- if show_dynamic_checkout -%}
          {{ form | payment_button }}
        {%- endif -%}
      </div>
    {%- endform -%}
  </product-form>
</div>

<script>
  if (!customElements.get('product-form')) {
    customElements.define(
      'product-form',
      class ProductForm extends HTMLElement {
        constructor() {
          super();

          this.form = this.querySelector('form');
          this.form.querySelector('[name=id]').disabled = false;
          this.form.addEventListener('submit', this.onSubmitHandler.bind(this));
          this.cart = document.querySelector('cart-notification') || document.querySelector('cart-drawer');
          this.submitButton = this.querySelector('[type="submit"]');
          this.submitButtonText = this.submitButton.querySelector('span');

          if (document.querySelector('cart-drawer')) this.submitButton.setAttribute('aria-haspopup', 'dialog');

          this.hideErrors = this.dataset.hideErrors === 'true';
        }

        onSubmitHandler(evt) {
          evt.preventDefault();
          if (this.submitButton.getAttribute('aria-disabled') === 'true') return;

          this.handleErrorMessage();

          this.submitButton.setAttribute('aria-disabled', true);
          this.submitButton.classList.add('loading');
          this.querySelector('.loading-overlay__spinner').classList.remove('opacity-0', 'pointer-events-none');

          const config = {
            method: 'POST',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
              Accept: 'application/json',
            },
          };

          const formData = new FormData(this.form);
          if (this.cart) {
            formData.append(
              'sections',
              this.cart.getSectionsToRender().map((section) => section.id)
            );
            formData.append('sections_url', window.location.pathname);
          }
          config.body = formData;

          fetch(`${window.routes.cart_add_url}`, config)
            .then((response) => {
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              const contentType = response.headers.get('content-type');
              if (contentType && contentType.includes('application/json')) {
                return response.json();
              } else {
                // Handle HTML response (redirect)
                window.location = window.routes.cart_url;
                return null;
              }
            })
            .then((response) => {
              // If response is null, we're redirecting
              if (response === null) {
                return;
              }

              if (response.status) {
                publish(PUB_SUB_EVENTS.cartError, {
                  source: 'product-form',
                  productVariantId: formData.get('id'),
                  errors: response.errors || response.description,
                  message: response.message,
                });
                this.handleErrorMessage(response.description);

                const soldOutMessage = this.submitButton.querySelector('.sold-out-message');
                if (!soldOutMessage) return;
                this.submitButton.setAttribute('aria-disabled', false);
                this.submitButton.classList.remove('loading');
                this.querySelector('.loading-overlay__spinner').classList.add('opacity-0', 'pointer-events-none');
                return;
              } else if (!this.cart) {
                window.location = window.routes.cart_url;
                return;
              }

              if (!this.error)
                publish(PUB_SUB_EVENTS.cartUpdate, {
                  source: 'product-form',
                  productVariantId: formData.get('id'),
                  cartData: response,
                });
              this.handleErrorMessage();
              this.submitButton.setAttribute('aria-disabled', false);
              this.submitButton.classList.remove('loading');
              this.querySelector('.loading-overlay__spinner').classList.add('opacity-0', 'pointer-events-none');
            })
            .catch((e) => {
              console.error('Add to cart error:', e);
              this.handleErrorMessage('Failed to add item to cart. Please try again.');
              this.submitButton.setAttribute('aria-disabled', false);
              this.submitButton.classList.remove('loading');
              this.querySelector('.loading-overlay__spinner').classList.add('opacity-0', 'pointer-events-none');
            })
            .finally(() => {
              this.submitButton.classList.remove('loading');
              if (this.cart && this.cart.classList.contains('is-empty')) this.cart.classList.remove('is-empty');
              if (!this.error) this.submitButton.removeAttribute('aria-disabled');
              this.querySelector('.loading-overlay__spinner').classList.add('opacity-0', 'pointer-events-none');
            });
        }

        handleErrorMessage(errorMessage = false) {
          if (this.hideErrors) return;

          this.errorMessageWrapper =
            this.errorMessageWrapper || this.querySelector('.product-form__error-message-wrapper');
          if (!this.errorMessageWrapper) return;
          this.errorMessage =
            this.errorMessage || this.errorMessageWrapper.querySelector('.product-form__error-message');

          this.errorMessageWrapper.toggleAttribute('hidden', !errorMessage);

          if (errorMessage) {
            this.errorMessage.textContent = errorMessage;
          }
        }
      }
    );
  }
</script>
