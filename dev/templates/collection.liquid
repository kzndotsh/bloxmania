{% comment %}
  Comprehensive Collection Page Template
  Uses modern component-based architecture with Tailwind CSS
{% endcomment %}

{%- assign current_view = 'grid' -%}

<!-- Collection Schema Markup -->
<script type="application/ld+json">
  {
    "@context": "https://schema.org/",
    "@type": "CollectionPage",
    "name": {{ collection.title | json }},
    "description": {{ collection.description | strip_html | truncatewords: 150 | json }},
    "url": {{ request.origin | append: collection.url | json }},
    "numberOfItems": {{ collection.products_count | json }},
    "mainEntity": {
      "@type": "ItemList",
      "numberOfItems": {{ collection.products_count | json }},
      "itemListElement": [
        {%- for product in collection.products limit: 12 -%}
          {%- unless forloop.first -%},{%- endunless -%}
          {
            "@type": "ListItem",
            "position": {{ forloop.index | json }},
            "item": {
              "@type": "Product",
              "name": {{ product.title | json }},
              "url": {{ request.origin | append: product.url | json }},
              "image": {{ product.featured_image | image_url: width: 300 | json }},
              "offers": {
                "@type": "Offer",
                "price": {{ product.price | divided_by: 100.0 | json }},
                "priceCurrency": {{ cart.currency.iso_code | json }},
                "availability": "{% if product.available %}https://schema.org/InStock{% else %}https://schema.org/OutOfStock{% endif %}"
              }
            }
          }
        {%- endfor -%}
      ]
    }
  }
</script>

<div class="bg-background text-white min-h-screen page-content">
  <div class="container section">
    <!-- Breadcrumb Navigation -->
    {% render 'breadcrumb', collection: collection %}

    <!-- Collection Header -->
    <div class="collection-header mb-8">
      <div class="text-center max-w-4xl mx-auto">
        <h1 class="text-h1 text-white mb-4">
          {{ collection.title | escape }}
        </h1>

        {%- if collection.description != blank -%}
          <div class="collection-description prose prose-invert max-w-none mb-6 text-body">
            {{ collection.description }}
          </div>
        {%- endif -%}

        <div class="collection-meta flex items-center justify-center gap-4 text-gray-400">
          <span class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z"/>
            </svg>
            {{ collection.products_count }}
            {%- if collection.products_count == 1 -%}
              {{ 'collections.general.item' | t | default: 'item' }}
            {%- else -%}
              {{ 'collections.general.items' | t | default: 'items' }}
            {%- endif -%}
          </span>
        </div>
      </div>
    </div>

    <!-- Collection Filters and Sorting -->
    <div class="collection-toolbar mb-8 -mx-6 px-6">
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <!-- Left side: Filters, Back button, Sort options -->
        <div class="flex flex-col lg:flex-row lg:items-center gap-4">
          <!-- Collection Filter and Sort Options -->
          <div class="filter-sort-container flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4 w-full lg:w-auto">
            {%- comment -%} Only show collection filter on the "all" collection page {%- endcomment -%}
            {%- if collection.handle == 'all' and collection.products.size > 0 -%}
              {%- assign unique_collections = '' -%}
              {%- for product in collection.products -%}
                {%- for product_collection in product.collections -%}
                  {%- unless product_collection.title == 'All Items'
                    or product_collection.handle == 'all'
                    or unique_collections contains product_collection.title
                  -%}
                    {%- assign unique_collections = unique_collections
                      | append: product_collection.title
                      | append: ','
                    -%}
                  {%- endunless -%}
                {%- endfor -%}
              {%- endfor -%}

              {%- if unique_collections != '' -%}
                {%- assign collection_array = unique_collections | split: ',' -%}
                <div class="collection-filter flex flex-col sm:flex-row items-start sm:items-center gap-2 w-full sm:w-auto">
                  <label for="collection-filter" class="text-sm font-medium text-gray-300 whitespace-nowrap"
                    >Filter by Category:</label
                  >
                  <form class="relative w-full sm:w-auto">
                    <select
                      id="collection-filter"
                      name="collection_filter"
                      class="collection-select bg-gray-900/80 backdrop-blur-sm border border-gray-700/50 text-white rounded-xl px-4 py-3 pr-10 text-sm font-medium shadow-lg focus:border-primary/50 focus:outline-none focus:ring-0 appearance-none cursor-pointer transition-all duration-300 hover:bg-gray-800/80 w-full sm:w-auto"
                      onchange="filterByCollection(this.value)"
                    >
                      <option value="">All Categories</option>
                      {%- for collection_name in collection_array -%}
                        {%- unless collection_name == '' -%}
                          <option value="{{ collection_name | handleize }}">
                            {{ collection_name }}
                          </option>
                        {%- endunless -%}
                      {%- endfor -%}
                    </select>
                    <!-- Custom dropdown arrow -->
                    <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <svg
                        class="w-4 h-4 text-gray-400 transition-colors duration-300"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                      </svg>
                    </div>
                  </form>
                </div>
              {%- endif -%}
            {%- endif -%}

            <!-- Back to All button (only show on specific collection pages) -->
            {%- unless collection.handle == 'all' -%}
              <div class="back-to-all flex items-center w-full sm:w-auto">
                <a
                  href="/collections/all"
                  class="inline-flex items-center gap-2 bg-gray-900/80 backdrop-blur-sm border border-gray-700/50 text-white rounded-xl px-4 py-3 transition-all duration-300 hover:bg-gray-800/80 hover:border-primary/50 focus:outline-none focus:ring-0 font-medium text-sm shadow-lg w-full sm:w-auto justify-center sm:justify-start"
                  aria-label="Back to all products"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                  </svg>
                  <span>Back to All</span>
                </a>
              </div>
            {%- endunless -%}

            <!-- Sort Options -->
            <div class="sort-options flex flex-col sm:flex-row items-start sm:items-center gap-2 w-full sm:w-auto">
              <label for="sort-by" class="text-sm font-medium text-gray-300 whitespace-nowrap">Sort by:</label>
              <div class="relative w-full sm:w-auto">
                <select
                  id="sort-by"
                  name="sort_by"
                  class="sort-select bg-gray-900/80 backdrop-blur-sm border border-gray-700/50 text-white rounded-xl px-4 py-3 pr-10 text-sm font-medium shadow-lg focus:border-primary/50 focus:outline-none focus:ring-0 appearance-none cursor-pointer transition-all duration-300 hover:bg-gray-800/80 w-full sm:w-auto"
                >
                  <option
                    value="manual"
                    {% if collection.sort_by == 'manual' %}
                      selected="selected"
                    {% endif %}
                  >
                    Featured
                  </option>
                  <option
                    value="price-ascending"
                    {% if collection.sort_by == 'price-ascending' %}
                      selected="selected"
                    {% endif %}
                  >
                    Price: Low to High
                  </option>
                  <option
                    value="price-descending"
                    {% if collection.sort_by == 'price-descending' %}
                      selected="selected"
                    {% endif %}
                  >
                    Price: High to Low
                  </option>
                  <option
                    value="title-ascending"
                    {% if collection.sort_by == 'title-ascending' %}
                      selected="selected"
                    {% endif %}
                  >
                    Name: A to Z
                  </option>
                  <option
                    value="title-descending"
                    {% if collection.sort_by == 'title-descending' %}
                      selected="selected"
                    {% endif %}
                  >
                    Name: Z to A
                  </option>
                  <option
                    value="created-ascending"
                    {% if collection.sort_by == 'created-ascending' %}
                      selected="selected"
                    {% endif %}
                  >
                    Oldest First
                  </option>
                  <option
                    value="created-descending"
                    {% if collection.sort_by == 'created-descending' %}
                      selected="selected"
                    {% endif %}
                  >
                    Newest First
                  </option>
                </select>
                <!-- Custom dropdown arrow -->
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg
                    class="w-4 h-4 text-gray-400 transition-colors duration-300"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Right side: View Toggle -->
        <div class="flex items-center gap-4">
          <!-- View Toggle -->
          <div class="view-toggle flex items-center gap-2">
            <span class="text-sm font-medium text-gray-300">View:</span>
            <div class="view-switcher">
              <div
                class="view-slider absolute top-1 left-1 w-10 h-10 bg-gradient-to-r from-primary to-yellow-400 rounded-lg transition-transform duration-300 ease-out shadow-md"
              ></div>
              <a
                href="{{ collection.url }}"
                class="view-btn view-btn--grid relative z-10 flex items-center justify-center w-10 h-10 rounded-lg transition-all duration-300 active"
                aria-label="{{ 'collections.general.grid_view' | t | default: 'Grid view' }}"
                title="Grid View"
              >
                <svg class="w-5 h-5 transition-colors duration-300" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M3 3h7v7H3V3zm0 11h7v7H3v-7zm11-11h7v7h-7V3zm0 11h7v7h-7v-7z"/>
                </svg>
              </a>
              <a
                href="{{ collection.url }}?view=list"
                class="view-btn view-btn--list relative z-10 flex items-center justify-center w-10 h-10 rounded-lg transition-all duration-300"
                aria-label="{{ 'collections.general.list_view' | t | default: 'List view' }}"
                title="List View"
              >
                <svg class="w-5 h-5 transition-colors duration-300" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M3 6h8v2H3V6zm0 5h8v2H3v-2zm0 5h8v2H3v-2zm10 0h8v2h-8v-2zm0-5h8v2h-8v-2zm0-5h8v2h-8V6z"/>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Products Grid -->
    {%- if collection.products.size > 0 -%}
      <div class="products-container">
        <div
          id="products-grid"
          class="products-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-12 lg:gap-16"
          style="contain: layout style;"
        >
          {%- for product in collection.products -%}
            {%- assign product_collections = '' -%}
            {%- for product_collection in product.collections -%}
              {%- unless product_collection.title == 'All Items' or product_collection.handle == 'all' -%}
                {%- assign product_collections = product_collections
                  | append: product_collection.title
                  | append: ','
                -%}
              {%- endunless -%}
            {%- endfor -%}
            <div
              class="product-item h-full"
              data-collections="{{ product_collections | remove_last: ',' }}"
              data-created="{{ product.created_at | date: '%Y-%m-%d' }}"
              style="contain: layout style; opacity: 1;"
            >
              {% render 'card-product',
                card_product: product,
                show_vendor: true,
                show_compare_at_price: true,
                lazy_load: false,
                layout: current_view
              %}
            </div>
          {%- endfor -%}
        </div>
      </div>
    {%- else -%}
      <!-- Empty Collection State -->
      <div class="empty-collection text-center py-16">
        <div class="max-w-md mx-auto">
          <div class="mb-6">
            <svg class="w-24 h-24 mx-auto text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-white mb-4">
            {{ 'collections.general.no_matches' | t | default: 'No products found' }}
          </h2>
          <p class="text-gray-400 mb-6">
            {{
              'collections.general.no_matches_description'
              | t
              | default: 'This collection is empty or no products match your current filters.'
            }}
          </p>
          <a
            href="{{ routes.all_products_collection_url }}"
            class="inline-flex items-center gap-2 bg-primary hover:bg-primary-dark text-black font-medium px-6 py-3 rounded-lg transition-colors duration-200"
          >
            {{ 'collections.general.browse_all' | t | default: 'Browse All Products' }}
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
          </a>
        </div>
      </div>
    {%- endif -%}

    <style>
      /* Collection Toolbar - Override container padding for flush alignment */
      .collection-toolbar {
        margin-left: calc(-1 * var(--container-padding));
        margin-right: calc(-1 * var(--container-padding));
        padding-left: var(--container-padding);
        padding-right: var(--container-padding);
      }

      /* Stable Grid Layout */
      .products-grid {
        contain: layout style;
      }

      .product-item {
        contain: layout style;
        opacity: 1 !important;
        transition: none !important;
      }

      .product-item img {
        transition: none !important;
      }

      /* Modern View Toggle Styles */
      .view-switcher {
        position: relative;
        display: flex;
        align-items: center;
        background: rgba(17, 24, 39, 0.8);
        backdrop-filter: blur(8px);
        border-radius: 0.75rem;
        border: 1px solid rgba(55, 65, 81, 0.5);
        padding: 0.25rem;
        box-shadow:
          0 10px 15px -3px rgba(0, 0, 0, 0.1),
          0 4px 6px -2px rgba(0, 0, 0, 0.05);
      }

      .view-slider {
        position: absolute;
        top: 0.25rem;
        left: 0.25rem;
        width: 2.5rem;
        height: 2.5rem;
        background: linear-gradient(135deg, #ffd800 0%, #ffed4e 100%);
        border-radius: 0.5rem;
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow:
          0 4px 6px -1px rgba(0, 0, 0, 0.1),
          0 2px 4px -1px rgba(0, 0, 0, 0.06);
      }

      .view-btn {
        position: relative;
        z-index: 10;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2.5rem;
        height: 2.5rem;
        background: transparent;
        border: none;
        border-radius: 0.5rem;
        color: #9ca3af;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .view-btn:hover {
        color: #ffffff;
        transform: scale(1.05);
      }

      .view-btn.active {
        color: #000000;
      }

      .view-btn:focus {
        outline: none;
        box-shadow: 0 0 0 1px rgba(255, 216, 0, 0.5);
      }

      /* Slider Animation - Fixed positioning logic */
      .view-btn--list.active ~ .view-slider,
      .view-switcher:has(.view-btn--list.active) .view-slider {
        transform: translateX(2.5rem);
      }

      /* Default position for grid view (left side) */
      .view-slider {
        transform: translateX(0);
      }

      /* Ensure proper active states */
      .view-btn--grid.active {
        color: #000000;
      }

      .view-btn--list.active {
        color: #000000;
      }

      /* Animation for view changes */
      .products-grid {
        transition: all 0.3s ease;
      }

      .product-item {
        animation: fadeInUp 0.6s ease-out;
        animation-fill-mode: both;
      }

      .product-item:nth-child(1) {
        animation-delay: 0.1s;
      }
      .product-item:nth-child(2) {
        animation-delay: 0.2s;
      }
      .product-item:nth-child(3) {
        animation-delay: 0.3s;
      }
      .product-item:nth-child(4) {
        animation-delay: 0.4s;
      }
      .product-item:nth-child(5) {
        animation-delay: 0.5s;
      }
      .product-item:nth-child(6) {
        animation-delay: 0.6s;
      }
      .product-item:nth-child(7) {
        animation-delay: 0.7s;
      }
      .product-item:nth-child(8) {
        animation-delay: 0.8s;
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .collection-toolbar {
          flex-direction: column;
          gap: 1rem;
        }

        .products-grid {
          grid-template-columns: repeat(2, 1fr);
          gap: 1rem;
        }

        /* Hide view toggle on mobile */
        .view-toggle {
          display: none !important;
        }
      }

      /* Tablet-specific layout (between mobile and desktop) */
      @media (min-width: 769px) and (max-width: 1023px) {
        .collection-toolbar > div {
          flex-direction: row;
          justify-content: space-between;
          align-items: center;
        }

        /* Move view toggle to the right side on tablet */
        .collection-toolbar .flex.flex-col.lg\\:flex-row {
          flex-direction: row !important;
          justify-content: space-between !important;
          align-items: center !important;
          width: 100%;
        }

        /* Ensure left side items stay grouped */
        .filter-sort-container {
          flex-direction: row;
          align-items: center;
          gap: 1rem;
        }
      }

      @media (max-width: 640px) {
        .products-grid {
          grid-template-columns: 1fr;
        }
      }

      /* Accessibility improvements */
      @media (prefers-reduced-motion: reduce) {
        .products-grid,
        .product-item {
          animation: none;
          transition: none;
        }
      }

      /* High contrast mode support */
      @media (prefers-contrast: high) {
        .view-btn {
          border-width: 2px;
        }

        .view-btn.active {
          border-width: 3px;
        }
      }

      /* Dynamic color extraction for product cards */
      .product-card-widget {
        transition: all 0.3s ease;
        position: relative;
      }

      .product-card-widget::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border-radius: 1rem;
        background: linear-gradient(
          45deg,
          transparent 0%,
          var(--dominant-color, var(--color-primary)) 25%,
          transparent 50%,
          var(--dominant-color, var(--color-primary)) 75%,
          transparent 100%
        );
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: -1;
      }

      .product-card-widget:hover::before {
        opacity: 0.2;
      }

      .product-card-widget:hover {
        box-shadow:
          0 10px 25px rgba(0, 0, 0, 0.2),
          0 0 20px rgba(var(--dominant-color-rgb, 255, 216, 0), 0.3);
      }
    </style>

    <script>
      // Simple client-side view toggle functionality
      function setView(viewType) {
        // On mobile, only allow grid view
        const isMobile = window.innerWidth <= 768;
        if (isMobile && viewType === 'list') {
          viewType = 'grid';
        }

        const grid = document.getElementById('products-grid');
        const buttons = document.querySelectorAll('.view-btn');

        // Update button states
        buttons.forEach((btn) => {
          btn.classList.remove('active');
          if (btn.classList.contains(`view-btn--${viewType}`)) {
            btn.classList.add('active');
          }
        });

        // Store user preference
        localStorage.setItem('collection-view-preference', viewType);

        // Update URL parameter for server-side detection
        const url = new URL(window.location);
        if (viewType === 'list') {
          url.searchParams.set('view', 'list');
        } else {
          url.searchParams.delete('view');
        }
        window.history.pushState({}, '', url);
      }

      function toggleFilters() {
        // Placeholder for future filter functionality
      }

      function filterByCollection(collectionName) {
        const productItems = document.querySelectorAll('.product-item');
        const selectedCollection = collectionName.toLowerCase();

        productItems.forEach((item) => {
          const productCollections = item.getAttribute('data-collections');

          if (!selectedCollection || selectedCollection === '') {
            // Show all products when "All Categories" is selected
            item.style.display = 'block';
          } else if (productCollections) {
            const collections = productCollections.toLowerCase().split(',');
            const hasCollection = collections.some(
              (collection) =>
                collection.trim() === selectedCollection ||
                collection.trim().replace(/\s+/g, '-') === selectedCollection,
            );

            item.style.display = hasCollection ? 'block' : 'none';
          } else {
            // Hide products without collection data
            item.style.display = 'none';
          }
        });

        // Update dropdown options to only show categories from visible products
        updateCollectionDropdown();

        // Update URL without page reload
        const url = new URL(window.location);
        if (selectedCollection) {
          url.searchParams.set('collection_filter', selectedCollection);
        } else {
          url.searchParams.delete('collection_filter');
        }
        window.history.pushState({}, '', url);
      }

      function updateCollectionDropdown() {
        const allProducts = document.querySelectorAll('.product-item');
        const collectionFilter = document.getElementById('collection-filter');
        const currentValue = collectionFilter.value;

        // Get all unique collections from ALL products (not just visible ones)
        const allCollections = new Set();
        allProducts.forEach((item) => {
          const productCollections = item.getAttribute('data-collections');
          if (productCollections) {
            const collections = productCollections.split(',');
            collections.forEach((collection) => {
              if (collection.trim()) {
                allCollections.add(collection.trim());
              }
            });
          }
        });

        // Update dropdown options to show ALL available categories
        const options = collectionFilter.querySelectorAll('option');
        options.forEach((option, index) => {
          if (index === 0) return; // Keep "All Categories" option

          const optionText = option.textContent.trim();

          // Show all categories that exist in the collection
          if (allCollections.has(optionText)) {
            option.style.display = 'block';
          } else {
            option.style.display = 'none';
          }
        });
      }

      // Removed client-side sortProducts; sorting is handled via URL change in CollectionManager

      // Initialize view on page load
      document.addEventListener('DOMContentLoaded', function () {
        // Get saved preference or default to grid
        const savedView = localStorage.getItem('collection-view-preference') || 'grid';

        // Apply the saved view
        setView(savedView);

        // Apply collection filter from URL if present
        const url = new URL(window.location);
        const collectionFilter = url.searchParams.get('collection_filter');
        if (collectionFilter) {
          const filterSelect = document.getElementById('collection-filter');
          if (filterSelect) {
            filterSelect.value = collectionFilter;
            filterByCollection(collectionFilter);
          }
        }

        // Ensure select reflects URL param if present, without client-side resort
        const sortBy = url.searchParams.get('sort_by');
        if (sortBy) {
          const sortSelect = document.getElementById('sort-by');
          if (sortSelect) {
            sortSelect.value = sortBy;
          }
        }
      });

      // Color extraction function
      function extractDominantColor(img) {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = img.naturalWidth;
        canvas.height = img.naturalHeight;
        ctx.drawImage(img, 0, 0);

        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
        const colors = {};

        // Focus on center area (middle 50% of the image)
        const centerX = Math.floor(canvas.width * 0.25);
        const centerY = Math.floor(canvas.height * 0.25);
        const centerWidth = Math.floor(canvas.width * 0.5);
        const centerHeight = Math.floor(canvas.height * 0.5);

        // Sample pixels from center area only
        for (let y = centerY; y < centerY + centerHeight; y++) {
          for (let x = centerX; x < centerX + centerWidth; x++) {
            const i = (y * canvas.width + x) * 4;
            const r = imageData[i];
            const g = imageData[i + 1];
            const b = imageData[i + 2];
            const rgb = `${r},${g},${b}`;
            colors[rgb] = (colors[rgb] || 0) + 1;
          }
        }

        // Find the most common color
        let dominantColor = Object.keys(colors).reduce((a, b) => (colors[a] > colors[b] ? a : b));
        const [r, g, b] = dominantColor.split(',').map(Number);

        // Convert to hex
        const hex = '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
        return hex;
      }

      // Apply dominant colors to product cards
      function applyDominantColors() {
        const productCards = document.querySelectorAll('.product-card-widget');

        productCards.forEach((card) => {
          const img = card.querySelector('img');
          if (img && img.complete) {
            const dominantColor = extractDominantColor(img);
            const rgb = hexToRgb(dominantColor);
            card.style.setProperty('--dominant-color', dominantColor);
            card.style.setProperty('--dominant-color-rgb', rgb);
          } else if (img) {
            img.addEventListener('load', () => {
              const dominantColor = extractDominantColor(img);
              const rgb = hexToRgb(dominantColor);
              card.style.setProperty('--dominant-color', dominantColor);
              card.style.setProperty('--dominant-color-rgb', rgb);
            });
          }
        });
      }

      // Convert hex to RGB
      function hexToRgb(hex) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
          ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}`
          : '255, 216, 0';
      }

      // Run when DOM is loaded
      document.addEventListener('DOMContentLoaded', applyDominantColors);

      // Re-run when products are filtered or sorted
      function reapplyColors() {
        setTimeout(applyDominantColors, 100);
      }

      // Reapply colors after filtering
      const originalFilterByCollection = window.filterByCollection;
      window.filterByCollection = function (collectionName) {
        if (originalFilterByCollection) {
          originalFilterByCollection(collectionName);
        }
        reapplyColors();
      };
    </script>
  </div>
</div>
