{% comment %}
  Collection List View Template
  Shows products in a horizontal list layout with image on left, text on right
{% endcomment %}

<!-- Collection Schema Markup -->
<script type="application/ld+json">
  {
    "@context": "https://schema.org/",
    "@type": "CollectionPage",
    "name": {{ collection.title | json }},
    "description": {{ collection.description | strip_html | truncatewords: 150 | json }},
    "url": {{ request.origin | append: collection.url | json }},
    "numberOfItems": {{ collection.products_count | json }},
    "mainEntity": {
      "@type": "ItemList",
      "numberOfItems": {{ collection.products_count | json }},
      "itemListElement": [
        {%- for product in collection.products limit: 12 -%}
          {%- unless forloop.first -%},{%- endunless -%}
          {
            "@type": "ListItem",
            "position": {{ forloop.index | json }},
            "item": {
              "@type": "Product",
              "name": {{ product.title | json }},
              "url": {{ request.origin | append: product.url | json }},
              "image": {{ product.featured_image | image_url: width: 300 | json }},
              "offers": {
                "@type": "Offer",
                "price": {{ product.price | divided_by: 100.0 | json }},
                "priceCurrency": {{ cart.currency.iso_code | json }},
                "availability": "{% if product.available %}https://schema.org/InStock{% else %}https://schema.org/OutOfStock{% endif %}"
              }
            }
          }
        {%- endfor -%}
      ]
    }
  }
</script>

<div class="bg-background text-white min-h-screen page-content">
  <div class="container section">
    <!-- Breadcrumb Navigation -->
    {% render 'breadcrumb', collection: collection %}

    <!-- Collection Header -->
    <div class="collection-header mb-8">
      <div class="text-center max-w-4xl mx-auto">
        <h1 class="text-h1 text-white mb-4">
          {{ collection.title | escape }}
        </h1>

        {%- if collection.description != blank -%}
          <div class="collection-description prose prose-invert max-w-none mb-6 text-body">
            {{ collection.description }}
          </div>
        {%- endif -%}

        <div class="collection-meta flex items-center justify-center gap-4 text-gray-400">
          <span class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z"/>
            </svg>
            {{ collection.products_count }}
            {%- if collection.products_count == 1 -%}
              {{ 'collections.general.item' | t | default: 'item' }}
            {%- else -%}
              {{ 'collections.general.items' | t | default: 'items' }}
            {%- endif -%}
          </span>
        </div>
      </div>
    </div>

    <!-- Collection Filters and Sorting -->
    <div class="collection-toolbar mb-8 -mx-6 px-6">
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <!-- Left side: Filters, Back button, Sort options -->
        <div class="flex flex-col lg:flex-row lg:items-center gap-4">
          <!-- Collection Filter and Sort Options -->
          <div class="filter-sort-container flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4 w-full lg:w-auto">
            {%- comment -%} Only show collection filter on the "all" collection page {%- endcomment -%}
            {%- if collection.handle == 'all' and collection.products.size > 0 -%}
              {%- assign unique_collections = '' -%}
              {%- for product in collection.products -%}
                {%- for product_collection in product.collections -%}
                  {%- unless product_collection.title == 'All Items'
                    or product_collection.handle == 'all'
                    or unique_collections contains product_collection.title
                  -%}
                    {%- assign unique_collections = unique_collections
                      | append: product_collection.title
                      | append: ','
                    -%}
                  {%- endunless -%}
                {%- endfor -%}
              {%- endfor -%}

              {%- if unique_collections != '' -%}
                <div class="collection-filter">
                  <label for="collection-filter" class="block text-sm font-medium text-gray-300 mb-1">
                    {{ 'collections.filtering.filter_by_category' | t | default: 'Filter by Category:' }}
                  </label>
                  <select
                    id="collection-filter"
                    class="bg-gray-800 border border-gray-600 text-white rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-primary focus:border-transparent"
                    onchange="filterByCollection(this.value)"
                  >
                    <option value="">
                      {{ 'collections.filtering.all_categories' | t | default: 'All Categories' }}
                    </option>
                    {%- assign collections_array = unique_collections | split: ',' -%}
                    {%- for collection_name in collections_array -%}
                      {%- if collection_name != '' -%}
                        <option value="{{ collection_name | handleize }}">
                          {{ collection_name }}
                        </option>
                      {%- endif -%}
                    {%- endfor -%}
                  </select>
                </div>
              {%- endif -%}
            {%- endif -%}

            <!-- Sort Options -->
            <div class="sort-options">
              <label for="sort-by" class="block text-sm font-medium text-gray-300 mb-1">
                {{ 'collections.sorting.sort_by' | t | default: 'Sort by:' }}
              </label>
              <select
                id="sort-by"
                class="bg-gray-800 border border-gray-600 text-white rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-primary focus:border-transparent"
                onchange="sortProducts(this.value)"
              >
                <option value="manual">
                  {{ 'collections.sorting.featured' | t | default: 'Featured' }}
                </option>
                <option value="title-ascending">
                  {{ 'collections.sorting.az' | t | default: 'Alphabetically, A-Z' }}
                </option>
                <option value="title-descending">
                  {{ 'collections.sorting.za' | t | default: 'Alphabetically, Z-A' }}
                </option>
                <option value="price-ascending">
                  {{ 'collections.sorting.price_low_high' | t | default: 'Price, low to high' }}
                </option>
                <option value="price-descending">
                  {{ 'collections.sorting.price_high_low' | t | default: 'Price, high to low' }}
                </option>
                <option value="created-ascending">
                  {{ 'collections.sorting.date_old_new' | t | default: 'Date, old to new' }}
                </option>
                <option value="created-descending">
                  {{ 'collections.sorting.date_new_old' | t | default: 'Date, new to old' }}
                </option>
                <option value="best-selling">
                  {{ 'collections.sorting.best_selling' | t | default: 'Best selling' }}
                </option>
              </select>
            </div>
          </div>
        </div>

        <!-- Right side: View Toggle -->
        <div class="view-toggle flex items-center gap-4">
          <span class="text-sm text-gray-400">View:</span>
          <div class="view-switcher relative bg-gray-900/80 backdrop-blur-sm rounded-xl border border-gray-700/50 p-1 shadow-lg">
            <div
              class="view-slider absolute top-1 left-1 w-10 h-10 bg-gradient-to-r from-primary to-yellow-400 rounded-lg transition-transform duration-300 ease-out shadow-md"
              style="transform: translateX(2.5rem);"
            ></div>
            <a
              href="{{ collection.url }}"
              class="view-btn view-btn--grid relative z-10 flex items-center justify-center w-10 h-10 rounded-lg transition-all duration-300"
              aria-label="{{ 'collections.general.grid_view' | t | default: 'Grid view' }}"
              title="Grid View"
            >
              <svg class="w-5 h-5 transition-colors duration-300" fill="currentColor" viewBox="0 0 24 24">
                <path d="M3 3h4v4H3V3zm0 6h4v4H3V9zm0 6h4v4H3v-4zm6-12h4v4H9V3zm0 6h4v4H9V9zm0 6h4v4H9v-4zm6-12h4v4h-4V3zm0 6h4v4h-4V9zm0 6h4v4h-4v-4z"/>
              </svg>
            </a>
            <button
              type="button"
              class="view-btn view-btn--list relative z-10 flex items-center justify-center w-10 h-10 rounded-lg transition-all duration-300 active"
              aria-label="{{ 'collections.general.list_view' | t | default: 'List view' }}"
              title="List View"
            >
              <svg class="w-5 h-5 transition-colors duration-300" fill="currentColor" viewBox="0 0 24 24">
                <path d="M3 6h8v2H3V6zm0 5h8v2H3v-2zm0 5h8v2H3v-2zm10 0h8v2h-8v-2zm0-5h8v2h-8v-2zm0-5h8v2h-8V6z"/>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Products List -->
    {%- if collection.products.size > 0 -%}
      <div class="products-container">
        <div
          id="products-grid"
          class="products-grid flex flex-col gap-6"
          style="contain: layout style;"
        >
          {%- for product in collection.products -%}
            {%- assign product_collections = '' -%}
            {%- for product_collection in product.collections -%}
              {%- unless product_collection.title == 'All Items' or product_collection.handle == 'all' -%}
                {%- assign product_collections = product_collections
                  | append: product_collection.title
                  | append: ','
                -%}
              {%- endunless -%}
            {%- endfor -%}
            <div
              class="product-item h-full"
              data-collections="{{ product_collections | remove_last: ',' }}"
              data-created="{{ product.created_at | date: '%Y-%m-%d' }}"
              style="contain: layout style; opacity: 1;"
            >
              {% render 'card-product',
                card_product: product,
                show_vendor: true,
                show_compare_at_price: true,
                lazy_load: false,
                layout: 'list'
              %}
            </div>
          {%- endfor -%}
        </div>
      </div>
    {%- else -%}
      <!-- Empty Collection State -->
      <div class="empty-collection text-center py-16">
        <div class="max-w-md mx-auto">
          <div class="mb-6">
            <svg class="w-24 h-24 mx-auto text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-white mb-4">
            {{ 'collections.general.no_matches' | t | default: 'No products found' }}
          </h2>
          <p class="text-gray-400 mb-6">
            {{
              'collections.general.no_matches_description'
              | t
              | default: 'This collection is empty or no products match your current filters.'
            }}
          </p>
          <a
            href="{{ routes.all_products_collection_url }}"
            class="inline-flex items-center gap-2 bg-primary hover:bg-primary-dark text-black font-medium px-6 py-3 rounded-lg transition-colors duration-200"
          >
            {{ 'collections.general.browse_all' | t | default: 'Browse All Products' }}
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
          </a>
        </div>
      </div>
    {%- endif -%}
  </div>
</div>

<style>
  /* Collection Toolbar - Override container padding for flush alignment */
  .collection-toolbar {
    margin-left: calc(-1 * var(--container-padding));
    margin-right: calc(-1 * var(--container-padding));
    padding-left: var(--container-padding);
    padding-right: var(--container-padding);
  }

  /* Stable List Layout */
  .products-grid {
    contain: layout style;
    width: 100%;
  }

  .product-item {
    contain: layout style;
    opacity: 1 !important;
    transition: none !important;
    width: 100%;
  }

  .product-item img {
    transition: none !important;
  }

  /* List View Specific Styles */
  .product-card-list-modern {
    width: 100%;
    max-width: none;
  }

  .product-card-list-modern > div {
    width: 100%;
  }

  /* Modern View Toggle Styles */
  .view-switcher {
    position: relative;
    display: flex;
    align-items: center;
    background: rgba(17, 24, 39, 0.8);
    backdrop-filter: blur(8px);
    border-radius: 0.75rem;
    border: 1px solid rgba(55, 65, 81, 0.5);
    padding: 0.25rem;
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  .view-slider {
    position: absolute;
    top: 0.25rem;
    left: 0.25rem;
    width: 2.5rem;
    height: 2.5rem;
    background: linear-gradient(135deg, #ffd800 0%, #ffed4e 100%);
    border-radius: 0.5rem;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .view-btn {
    position: relative;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    background: transparent;
    border: none;
    border-radius: 0.5rem;
    color: #9ca3af;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-decoration: none;
  }

  .view-btn:hover {
    color: #ffffff;
    transform: scale(1.05);
  }

  .view-btn.active {
    color: #000000;
  }

  .view-btn:focus {
    outline: none;
    box-shadow: 0 0 0 1px rgba(255, 216, 0, 0.5);
  }

  /* Animation for view changes */
  .products-grid {
    transition: all 0.3s ease;
  }

  .product-item {
    animation: fadeInUp 0.6s ease-out;
    animation-fill-mode: both;
  }

  .product-item:nth-child(1) {
    animation-delay: 0.1s;
  }
  .product-item:nth-child(2) {
    animation-delay: 0.2s;
  }
  .product-item:nth-child(3) {
    animation-delay: 0.3s;
  }
  .product-item:nth-child(4) {
    animation-delay: 0.4s;
  }
  .product-item:nth-child(5) {
    animation-delay: 0.5s;
  }
  .product-item:nth-child(6) {
    animation-delay: 0.6s;
  }
  .product-item:nth-child(7) {
    animation-delay: 0.7s;
  }
  .product-item:nth-child(8) {
    animation-delay: 0.8s;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .collection-toolbar {
      flex-direction: column;
      gap: 1rem;
    }

    /* Hide view toggle on mobile */
    .view-toggle {
      display: none !important;
    }
  }

  /* Tablet-specific layout (between mobile and desktop) */
  @media (min-width: 769px) and (max-width: 1023px) {
    .collection-toolbar > div {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }

    /* Move view toggle to the right side on tablet */
    .collection-toolbar .flex.flex-col.lg\\:flex-row {
      flex-direction: row !important;
      justify-content: space-between !important;
      align-items: center !important;
      width: 100%;
    }

    /* Ensure left side items stay grouped */
    .filter-sort-container {
      flex-direction: row;
      align-items: center;
      gap: 1rem;
    }
  }

  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    .products-grid,
    .product-item {
      animation: none;
      transition: none;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .view-btn {
      border-width: 2px;
    }

    .view-btn.active {
      border-width: 3px;
    }
  }

  /* Dynamic color extraction for product cards */
  .product-card-widget {
    transition: all 0.3s ease;
    position: relative;
  }

  .product-card-widget::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 1rem;
    background: linear-gradient(
      45deg,
      transparent 0%,
      var(--dominant-color, var(--color-primary)) 25%,
      transparent 50%,
      var(--dominant-color, var(--color-primary)) 75%,
      transparent 100%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }

  .product-card-widget:hover::before {
    opacity: 0.2;
  }

  .product-card-widget:hover {
    box-shadow:
      0 10px 25px rgba(0, 0, 0, 0.2),
      0 0 20px rgba(var(--dominant-color-rgb, 255, 216, 0), 0.3);
  }
</style>

<script>
  function filterByCollection(collectionName) {
    const productItems = document.querySelectorAll('.product-item');
    const selectedCollection = collectionName.toLowerCase();

    productItems.forEach((item) => {
      const productCollections = item.getAttribute('data-collections');

      if (!selectedCollection || selectedCollection === '') {
        // Show all products when "All Categories" is selected
        item.style.display = 'block';
      } else if (productCollections) {
        const collections = productCollections.toLowerCase().split(',');
        const hasCollection = collections.some(
          (collection) =>
            collection.trim() === selectedCollection || collection.trim().replace(/\s+/g, '-') === selectedCollection,
        );

        item.style.display = hasCollection ? 'block' : 'none';
      } else {
        // Hide products without collection data
        item.style.display = 'none';
      }
    });

    // Update dropdown options to only show categories from visible products
    updateCollectionDropdown();

    // Update URL without page reload
    const url = new URL(window.location);
    if (selectedCollection) {
      url.searchParams.set('collection_filter', selectedCollection);
    } else {
      url.searchParams.delete('collection_filter');
    }
    window.history.pushState({}, '', url);
  }

  function updateCollectionDropdown() {
    const allProducts = document.querySelectorAll('.product-item');
    const collectionFilter = document.getElementById('collection-filter');
    const currentValue = collectionFilter.value;

    // Get all unique collections from ALL products (not just visible ones)
    const allCollections = new Set();
    allProducts.forEach((item) => {
      const productCollections = item.getAttribute('data-collections');
      if (productCollections) {
        const collections = productCollections.split(',');
        collections.forEach((collection) => {
          if (collection.trim()) {
            allCollections.add(collection.trim());
          }
        });
      }
    });

    // Update dropdown options to show ALL available categories
    const options = collectionFilter.querySelectorAll('option');
    options.forEach((option, index) => {
      if (index === 0) return; // Keep "All Categories" option

      const optionText = option.textContent.trim();

      // Show all categories that exist in the collection
      if (allCollections.has(optionText)) {
        option.style.display = 'block';
      } else {
        option.style.display = 'none';
      }
    });
  }

  function sortProducts(sortBy) {
    const productItems = document.querySelectorAll('.product-item');
    const productsArray = Array.from(productItems);

    // Get product data for sorting
    const productsWithData = productsArray.map((item) => {
      const title = item.querySelector('.card-product__title')?.textContent?.trim() || '';
      const priceElement = item.querySelector('.card-product__price');
      const price = priceElement ? parseFloat(priceElement.textContent.replace(/[^0-9.]/g, '')) : 0;
      const comparePriceElement = item.querySelector('.card-product__price--compare');
      const comparePrice = comparePriceElement
        ? parseFloat(comparePriceElement.textContent.replace(/[^0-9.]/g, ''))
        : 0;
      const dateCreated = item.getAttribute('data-created') || '';

      return { item, title, price, comparePrice, dateCreated };
    });

    // Sort based on selection
    productsWithData.sort((a, b) => {
      switch (sortBy) {
        case 'title-ascending':
          return a.title.localeCompare(b.title);
        case 'title-descending':
          return b.title.localeCompare(a.title);
        case 'price-ascending':
          return a.price - b.price;
        case 'price-descending':
          return b.price - a.price;
        case 'created-ascending':
          return a.dateCreated.localeCompare(b.dateCreated);
        case 'created-descending':
          return b.dateCreated.localeCompare(a.dateCreated);
        case 'best-selling':
          // For best-selling, we'll use a simple sort by popularity (could be enhanced with actual sales data)
          return 0; // Keep original order for now
        case 'manual':
        default:
          return 0; // Keep original order
      }
    });

    // Re-insert sorted products
    const productsGrid = document.getElementById('products-grid');
    productsWithData.forEach(({ item }) => {
      productsGrid.appendChild(item);
    });

    // Update URL without page reload
    const url = new URL(window.location);
    if (sortBy && sortBy !== 'manual') {
      url.searchParams.set('sort_by', sortBy);
    } else {
      url.searchParams.delete('sort_by');
    }
    window.history.pushState({}, '', url);
  }

  // Initialize view on page load
  document.addEventListener('DOMContentLoaded', function () {
    // Apply collection filter from URL if present
    const url = new URL(window.location);
    const collectionFilter = url.searchParams.get('collection_filter');
    if (collectionFilter) {
      const filterSelect = document.getElementById('collection-filter');
      if (filterSelect) {
        filterSelect.value = collectionFilter;
        filterByCollection(collectionFilter);
      }
    }

    // Apply sort from URL if present
    const sortBy = url.searchParams.get('sort_by');
    if (sortBy) {
      const sortSelect = document.getElementById('sort-by');
      if (sortSelect) {
        sortSelect.value = sortBy;
        sortProducts(sortBy);
      }
    }
  });

  // Color extraction function
  function extractDominantColor(img) {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    canvas.width = img.naturalWidth;
    canvas.height = img.naturalHeight;
    ctx.drawImage(img, 0, 0);

    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
    const colors = {};

    // Focus on center area (middle 50% of the image)
    const centerX = Math.floor(canvas.width * 0.25);
    const centerY = Math.floor(canvas.height * 0.25);
    const centerWidth = Math.floor(canvas.width * 0.5);
    const centerHeight = Math.floor(canvas.height * 0.5);

    // Sample pixels from center area only
    for (let y = centerY; y < centerY + centerHeight; y++) {
      for (let x = centerX; x < centerX + centerWidth; x++) {
        const i = (y * canvas.width + x) * 4;
        const r = imageData[i];
        const g = imageData[i + 1];
        const b = imageData[i + 2];
        const rgb = `${r},${g},${b}`;
        colors[rgb] = (colors[rgb] || 0) + 1;
      }
    }

    // Find the most common color
    let dominantColor = Object.keys(colors).reduce((a, b) => (colors[a] > colors[b] ? a : b));
    const [r, g, b] = dominantColor.split(',').map(Number);

    // Convert to hex
    const hex = '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    return hex;
  }

  // Apply dominant colors to product cards
  function applyDominantColors() {
    const productCards = document.querySelectorAll('.product-card-widget, .product-card-list-modern');

    productCards.forEach((card) => {
      const img = card.querySelector('img');
      if (img && img.complete) {
        const dominantColor = extractDominantColor(img);
        const rgb = hexToRgb(dominantColor);
        card.style.setProperty('--dominant-color', dominantColor);
        card.style.setProperty('--dominant-color-rgb', rgb);
      } else if (img) {
        img.addEventListener('load', () => {
          const dominantColor = extractDominantColor(img);
          const rgb = hexToRgb(dominantColor);
          card.style.setProperty('--dominant-color', dominantColor);
          card.style.setProperty('--dominant-color-rgb', rgb);
        });
      }
    });
  }

  // Convert hex to RGB
  function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
      ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}`
      : '255, 216, 0';
  }

  // Run when DOM is loaded
  document.addEventListener('DOMContentLoaded', applyDominantColors);

  // Re-run when products are filtered or sorted
  function reapplyColors() {
    setTimeout(applyDominantColors, 100);
  }

  // Override existing functions to reapply colors
  const originalFilterByCollection = window.filterByCollection;
  const originalSortProducts = window.sortProducts;

  window.filterByCollection = function (collectionName) {
    if (originalFilterByCollection) {
      originalFilterByCollection(collectionName);
    }
    reapplyColors();
  };

  window.sortProducts = function (sortBy) {
    if (originalSortProducts) {
      originalSortProducts(sortBy);
    }
    reapplyColors();
  };
</script>
